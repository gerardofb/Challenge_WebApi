version: '3'
volumes:
  challenge_api:
  kafka:
  esdata01:
   driver: local
  certs:
   driver: local
  sql_server:
networks:
 challenge-network:
services:
  challenge_api:
    build: 
      context: ./.
      dockerfile: ./Dockerfile
    ports:
      - target: 80
        published: 6400
        protocol: tcp
    networks:
      - challenge-network
    volumes:
      - ./:/challenge_api
    command: > 
        bash -c "dotnet ef database update"
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - challenge-network
  sql_server:
    image: 'mcr.microsoft.com/mssql/server'
    container_name: mssql1
    ports:
      - '1433:1433'
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Jerry2003$ 
      - MSSQL_PID=Express
    networks:
      challenge-network:
      # el nombre del contenedor y el alias en la red deben ser el mismo en la cadena de conexión
        aliases:
          - mssql1
  esearch01:
      image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
      networks:
      - challenge-network
      environment:
       discovery.type: single-node
      ports:
       - ${ES_PORT}:9200
      mem_limit: ${ES_MEM_LIMIT}
      ulimits:
        memlock:
         soft: -1
         hard: -1


